/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db.ui;

/**
 *
 * @author Pranavan
 */
import java.util.Iterator;
import java.util.List;
import org.dom4j.*;
import org.hibernate.EntityMode;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import java.io.*;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.dom4j.tree.DefaultElement;
import org.hibernate.ReplicationMode;

public class BackUp extends javax.swing.JFrame {

    /**
     * Creates new form BackUp
     */
    private static SessionFactory sessions;

    public BackUp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backUp = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        restore = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backUp.setText("BackUp");
        backUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backUpActionPerformed(evt);
            }
        });

        exit.setText("Exit");

        restore.setText("Restore");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(restore, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(restore, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(backUp, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backUpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backUpActionPerformed
    public void dump(String backupFolder, String table) {
        Document document = DocumentHelper.createDocument();
        Element rootElement = document.addElement(table);

        Iterator<Element> it = queryDOM4J("from " + table).iterator();
        while (it.hasNext()) {
            Element element = it.next();
            rootElement.add(element);
        }
        try {
            saveDocument(document, backupFolder, table);
        } catch (IOException iOException) {
        }
    }

    public List queryDOM4J(String hsql) {
        Transaction tx = null;
        Session session = sessions.openSession();
        Session dom4jSession = session.getSession(EntityMode.DOM4J);
        List list = null;
        try {
            tx = session.beginTransaction();
            list = dom4jSession.createQuery(hsql).list();
            tx.commit();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        return list;
    }

    protected void saveDocument(Document document, String path, String table) throws IOException {
        if (canWrite(path)) {
            File file = new File(getDumpFile(path, table));
            XMLWriter writer = new XMLWriter(new FileWriter(file));
            writer.write(document);
            writer.close();
        }
    }

    protected boolean canWrite(String path) {
        File dir = new File(path);
        if (!dir.exists()) {
            boolean makeDir = dir.mkdirs();
            if (!makeDir) {
                System.out.println("Unable to create directory: " + path);
            }
        }

        return dir.exists();
    }

    protected String getDumpFile(String path, String tableName) {
        return path + "/" + tableName + ".xml";
    }

    public void restore(String path) {
        File[] files = getDumpFiles(path);
        if (files != null) {
            restoreTables(files);
        } else {
            System.out.println("[ERROR] Database restore | Backup folder '" + path + "' does not exist.");
        }
    }

    /**
     * Restore database tables
     *
     * @param files backup files
     */
    protected void restoreTables(File[] files) {
        Session session = sessions.openSession();
        Session dom4jSession = session.getSession(EntityMode.DOM4J);
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            restoreTables(dom4jSession, files);
            session.flush();
            tx.commit();
            session.close();
        } catch (Exception e) {
            if (tx != null) {
                tx.rollback();
                session.close();
            }
            e.printStackTrace();
        }
    }

    /**
     * Restore database tables
     *
     * @param session
     * @param files backup files
     * @throws DocumentException
     */
    @SuppressWarnings("unchecked")
    protected void restoreTables(Session session, File[] files) throws DocumentException {
        for (File file : files) {
            SAXReader reader = new SAXReader();
            Document document = reader.read(file);

            Iterator<Object> it = document.getRootElement().nodeIterator();
            while (it.hasNext()) {
                Object obj = it.next();
                if (obj instanceof DefaultElement) {
                    session.replicate(obj, ReplicationMode.OVERWRITE);
                }
            }
        }
    }

    /**
     * Get a list of files from specified folder
     *
     * @param path backup folder
     * @return list of backup files or null if path folder does not exist
     */
    protected File[] getDumpFiles(String path) {
        File dir = new File(path);
        if (dir.exists()) {
            return dir.listFiles();
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
     /* Set the Nimbus look and feel */
//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    
    /*try {
    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    if ("Nimbus".equals(info.getName())) {
    javax.swing.UIManager.setLookAndFeel(info.getClassName());
    break;
    }
    }
    }
    catch (ClassNotFoundException ex
    
    
    ) {
    java.util.logging.Logger.getLogger(BackUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex
    
    
    ) {
    java.util.logging.Logger.getLogger(BackUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex
    
    
    ) {
    java.util.logging.Logger.getLogger(BackUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex
    
    
    ) {
    java.util.logging.Logger.getLogger(BackUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }*/
//</editor-fold>

    /* Create and display the form */
    /*java.awt.EventQueue.invokeLater(new Runnable() {
     public void run() {
     new BackUp().setVisible(true);
     }
     });
     }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backUp;
    private javax.swing.JButton exit;
    private javax.swing.JButton restore;
    // End of variables declaration//GEN-END:variables
}
